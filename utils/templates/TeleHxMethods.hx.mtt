package telehx;
import telehx.TeleHxTypes;


class TeleHxMethods {
	public static var telegramAPIURL: String = "https://api.telegram.org/bot":
	
	public static function sendApiRequest(bot: TeleHxBot, method: String, ?params: HxMethodParams<Dynamic>, ?callback: HxApiResponse<Dynamic> -> Void) {
		var requestURL = '${telegramAPIURL}${bot.token}/${method}';
		var requestInstance = new haxe.Http(requestURL);
		requestInstance.setPostData(haxe.Json.stringify(params.params));
        requestInstance.addHeader('Content-Type', 'application/json');
		requestInstance.onData = function(data: String) {
			#if debug
			trace('sendApiRequest: $data');
			#end
			var response: HxApiResponse<Dynamic> = haxe.Json.parse(data);
			callback(response);
		}
        requestInstance.onError = function(data: String) {
            trace('Error: $data');
        }
		requestInstance.request(true);
	}

	/*
	 * ::telegram_method.description::
	 */
	public static function ::telegram_method.name::(bot: TeleHxBot, ?params: $$appendHx(::telegram_method.name::), ?callback: HxTYPEFOR::telegram_method.name:: -> Void): Void {
		sendApiRequest("::telegram_method.name::", {params: params}, function(response: HxApiResponse<HxTYPEFOR::telegram_method.name::>){
			callback(response.result);
		});
	}
}

/*
 * Parent of all method's parameter definitions.
 */
typedef HxMethodParams<T> = {
	params: T,
}

/*
 * Parameter typedef for method ::telegram_method.name::
 */
typedef $$appendHx(::telegram_method.name::) = {
	::foreach telegram_method.fields::
		/*
		 * ::description::
		 */
		::if !required::'?'::end::::parameter:: : $$getBaseType(::field_type::),
	::end::
}
