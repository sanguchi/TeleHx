package telehx;

{% set basic_types = {
	'Integer': 'Int', 
	'String': 'String', 
	'Boolean': 'Bool', 
	'Float number': 'Float', 
	'True': 'Bool', 
	'Float': 'Float'} 
%}

{# changes api objects names to append Hx in front ex: Message -> HxMessage #}
{%- macro append_hx(name) -%}
	Hx{{ name }}
{%- endmacro -%}

{# Builds Arrays definitions based on the type text, ex: Array of Message -> Array<HxApiResponse<HxMessage>> #}
{# It splits the string to choose the type, it should find: a basic type, an object type or another array type #}	
{%- macro build_array_definition(name) -%}
	{# Evaluate next word #}
	{%- set current_word = name.replace('of ', '').split()[0] -%}
	{# if we find an array, call this function recursively #}
	{%- if current_word == 'Array' -%}
		Array<{{ build_array_definition(' '.join(name.replace('of ', '').split()[1:])) }}>
	{%- else -%}
		{%- if current_word in basic_types.keys() -%}
			{{ basic_types[current_word] }}
		{%- else -%}
			{{ append_hx(current_word) }}
		{%- endif -%}
	{%- endif -%}
{%- endmacro -%}

{# returns the correct basic type name ex: Boolean -> Bool #}
{%- macro get_base_type(typename) -%}
	{%- if typename in basic_types.keys() -%}
		{{ basic_types[typename] }}
	{%- else -%}
		{%- if typename.split()[0] == 'Array' -%}
			{{ build_array_definition(typename) }}
		{%- else -%}
			{{ append_hx(typename) }}
		{%- endif -%}
	{%- endif -%}
{%- endmacro -%}

/*
 * Base class that represents a response from telegram.
 */
typedef HxApiResponse<T> = {
    ok: Bool,
    result: T,
}

{% for telegram_type in telegram_types %}
/*
 * {{ telegram_type.description }}
 */
typedef {{ append_hx(telegram_type.name) }} = {
	{% for field in telegram_type.fields %}

	/*
	 * {{ field.description }}
	 */
	{{ field.field }}: {{ get_base_type(field.field_type) }},
    {% endfor %}
}

{% endfor %}
